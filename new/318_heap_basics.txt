/*Heap Data Structure
    A Heap is a special Tree-based data structure.
    It is a complete binary tree - A complete binary tree is a binary tree in which all the levels are completely filled except possibly the lowest one, which is filled from the left to right.
      * prfect binary tree - all levels are completely filled.
      * almost complete binary tree - leaves can only be present only at the last and second last levels.
                                      leaves at same level must be filled from left to right.
    It follows heap property. 
    Generally, Heaps can be of two types:
      # Max-Heap: In a Max-Heap the key present at the root node must be greatest among the keys present at all of it’s children. The same property must be recursively true for all sub-trees in that Binary Tree.
      # Min-Heap: In a Min-Heap the key present at the root node must be minimum among the keys present at all of it’s children. The same property must be recursively true for all sub-trees in that Binary Tree.

                    10                                     100                              
                  /    \                                 /    \                            
                15     30                              40      50                           
               /  \   /  \                            /  \    /  \                          
             40   50 100  40                        10   15  50  40

                MIN HEAP                                MAX HEAP

  Heap is better than arrays (sorted and unsorted) and linked lists when it comes to insertion, findMin/findMax and delMin/delMax in one data structure at same time

                            Insertion        Search          findMin/findMax          delMin/delMax
  unsorted array      ->      O(1)            O(n)                 O(n)                    O(n)
  sorted array        ->      O(n)           O(logn)               O(1)                    O(n)
  linked list         ->      O(n)            O(n)                 O(n)                    O(n)
  minHeap/ maxHeap    ->     O(logn)          O(n)                 O(1)                   O(logn)

  A binary tree can be represented in form of an array, where - 
    parent is at   --> i index
    left child at  --> (2*i + 1) index
    right child at --> (2*i + 2) index ,    (i starts from 0)

    if a child is at i index than its parent will be at --> ceil(i/2) - 1

  As in case of binary tree ---> for a tree of height h, it will have 2^h nodes in level h (last level)
                                 for a tree of height h, total nodes = 2^(h+1) -1

  a heap can be coverted into a sorted array, max size of array req for heap of height h will be 2^(h+1) -1

  if heap size = n, ie. it has n nodes and arr[0,n) --> last element = n-1
    range of internal nodes = 0 to ((n-1) -1)/2 = 0 to (n/2) -1
    range of leaf nodes = (n/2) to n-1
*/

/*Building Heap from Array
  Given an array of N elements. The task is to build a Binary Heap from the given array. The heap can be either Max Heap or Min Heap.

  Example:
    Input: arr[] = {1, 3, 5, 4, 6, 13, 10, 9, 8, 15, 17}
    Output: Corresponding Max-Heap:
                     17
                  /      \
                15         13
              /    \      /  \
             9      6    5   10
            / \    /  \
           4   8  3    1

  Note:
    Root is at index 0 in array.
    Left child of i-th node is at (2*i + 1)th index.
    Right child of i-th node is at (2*i + 2)th index.
    Parent of i-th node is at (i-1)/2 index.

  Simple Approach: Suppose, we need to build a Max-Heap from the above-given array elements. It can be clearly seen that the above complete binary tree formed does not follow the Heap property. So, the idea is to heapify the complete binary tree formed from the array in reverse level order following a top-down approach.  
  That is first heapify, the last node in level order traversal of the tree, then heapify the second last node and so on.

  Time Complexity: Heapify a single node takes O(log N) time complexity where N is the total number of Nodes. Therefore, building the entire Heap will take N heapify operations and the total time complexity will be O(N*logN).

  In reality, building a heap takes O(n) time depending on the implementation which can be seen here.

  Optimized Approach: The above approach can be optimized by observing the fact that the leaf nodes need not to be heapified as they already follow the heap property. Also, the array representation of the complete binary tree contains the level order traversal of the tree.
  So the idea is to find the position of the last non-leaf node and perform the heapify operation of each non-leaf node in reverse level order.

    Last non-leaf node = parent of last-node.
    or, Last non-leaf node = parent of node at (n-1)th index.
    or, Last non-leaf node = Node at index ((n-1) - 1)/2.

    Illustration:
    Array = {1, 3, 5, 4, 6, 13, 10, 9, 8, 15, 17}

    Corresponding Complete Binary Tree is:
                     1
                  /     \
                3         5
             /    \     /  \
            4      6   13  10
           / \    / \
          9   8  15 17

    The task to build a Max-Heap from above array.

    Total Nodes = 11.
    last node's index = n-1 = 11-1 = 10
    Last Non-leaf node index = (10 -1)/2 = 4. (since int)
    Therefore, last non-leaf node = 6.

    To build the heap, heapify only the nodes:
    [1, 3, 5, 4, 6] in reverse order.

    Heapify 6: Swap 6 and 17.
                     1
                  /     \
                3         5
             /    \      /  \
            4      17   13  10
           / \    /  \
          9   8  15   6

    Heapify 4: Swap 4 and 9.
                     1
                  /     \
                3         5
             /    \      /  \
            9      17   13  10
           / \    /  \
          4   8  15   6

    Heapify 5: Swap 13 and 5.
                     1
                  /     \
                3         13
             /    \      /  \
            9      17   5   10
           / \    /  \
          4   8  15   6

    Heapify 3: First Swap 3 and 17, again swap 3 and 15.
                     1
                  /     \
                17         13
              /    \      /  \
             9      15   5   10
            / \    /  \
           4   8  3   6

    Heapify 1: First Swap 1 and 17, again swap 1 and 15, 
               finally swap 1 and 6.
                     17
                  /      \
                15         13
              /    \      /  \
             9      6    5   10
            / \    /  \
           4   8  3    1

*/